// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package collector.v1;

option csharp_namespace = "Collector.V1";
option go_package = "collectorv1";
option java_multiple_files = true;
option java_outer_classname = "CollectorApiProto";
option java_package = "org.zenithar.iocplatform.api.collector.v1";
option objc_class_prefix = "CXX";
option php_namespace = "Collector\\V1";

import "platform/v1/classification.proto";
import "platform/v1/object.proto";

// CollectorAPI is a service for observable publication from sources. It is
// principally used for queueing system abstraction.
service CollectorAPI {
  // Session register a new session for observable.
  rpc Session(SessionRequest) returns (SessionResponse);
  // Push is used to push observable in a given session.
  rpc Push(stream PushRequest) returns (PushResponse);
}

// -----------------------------------------------------------------------------

message SessionRequest {
  string url = 1;
  uint64 confidence = 2;
  string content_hash = 3;
  platform.v1.TLPLevel tlp = 4;
}

message SessionResponse {
  string session_id = 1;
}

message PushRequest {
  string session_id = 1;
  platform.v1.Object object = 2;
}

message PushResponse {
  string session_id = 1;
  uint64 object_count = 2;
}
