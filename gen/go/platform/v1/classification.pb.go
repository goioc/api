// Code generated by protoc-gen-go. DO NOT EDIT.
// source: platform/v1/classification.proto

package platformv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TLPLevel defines Traffic Light Protocol level enumeration.
// More informations (https://www.circl.lu/pub/traffic-light-protocol/)
type TLPLevel int32

const (
	TLPLevel_TLP_LEVEL_INVALID TLPLevel = 0
	// Disclosure not limited.
	TLPLevel_TLP_LEVEL_WHITE TLPLevel = 1
	// Limited disclosure, restricted to the communitity.
	TLPLevel_TLP_LEVEL_GREEN TLPLevel = 2
	// Limited disclosure, restricted to participant's organizations.
	TLPLevel_TLP_LEVEL_AMBER TLPLevel = 3
	// Not for disclosure, restricted to participants only.
	TLPLevel_TLP_LEVEL_RED TLPLevel = 4
)

var TLPLevel_name = map[int32]string{
	0: "TLP_LEVEL_INVALID",
	1: "TLP_LEVEL_WHITE",
	2: "TLP_LEVEL_GREEN",
	3: "TLP_LEVEL_AMBER",
	4: "TLP_LEVEL_RED",
}

var TLPLevel_value = map[string]int32{
	"TLP_LEVEL_INVALID": 0,
	"TLP_LEVEL_WHITE":   1,
	"TLP_LEVEL_GREEN":   2,
	"TLP_LEVEL_AMBER":   3,
	"TLP_LEVEL_RED":     4,
}

func (x TLPLevel) String() string {
	return proto.EnumName(TLPLevel_name, int32(x))
}

func (TLPLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9390e44c45c1ed6, []int{0}
}

func init() {
	proto.RegisterEnum("platform.v1.TLPLevel", TLPLevel_name, TLPLevel_value)
}

func init() { proto.RegisterFile("platform/v1/classification.proto", fileDescriptor_a9390e44c45c1ed6) }

var fileDescriptor_a9390e44c45c1ed6 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0xc8, 0x49, 0x2c,
	0x49, 0xcb, 0x2f, 0xca, 0xd5, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0x49, 0x2c, 0x2e, 0xce, 0x4c, 0xcb,
	0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x86, 0xa9,
	0xd0, 0x2b, 0x33, 0xd4, 0x2a, 0xe6, 0xe2, 0x08, 0xf1, 0x09, 0xf0, 0x49, 0x2d, 0x4b, 0xcd, 0x11,
	0x12, 0xe5, 0x12, 0x0c, 0xf1, 0x09, 0x88, 0xf7, 0x71, 0x0d, 0x73, 0xf5, 0x89, 0xf7, 0xf4, 0x0b,
	0x73, 0xf4, 0xf1, 0x74, 0x11, 0x60, 0x10, 0x12, 0xe6, 0xe2, 0x47, 0x08, 0x87, 0x7b, 0x78, 0x86,
	0xb8, 0x0a, 0x30, 0xa2, 0x0a, 0xba, 0x07, 0xb9, 0xba, 0xfa, 0x09, 0x30, 0xa1, 0x0a, 0x3a, 0xfa,
	0x3a, 0xb9, 0x06, 0x09, 0x30, 0x0b, 0x09, 0x72, 0xf1, 0x22, 0x04, 0x83, 0x5c, 0x5d, 0x04, 0x58,
	0x9c, 0xf2, 0xb9, 0x34, 0xf2, 0x8b, 0xd2, 0xf5, 0xaa, 0x52, 0xf3, 0x32, 0x4b, 0x32, 0x12, 0x8b,
	0xf4, 0x32, 0xf3, 0x93, 0xe1, 0x6e, 0x4a, 0x2c, 0xc8, 0xd4, 0x43, 0x72, 0xa0, 0x93, 0xb0, 0x33,
	0x8a, 0x1f, 0x02, 0x40, 0x5e, 0x08, 0x60, 0x8c, 0xe2, 0x82, 0xa9, 0x29, 0x33, 0x5c, 0xc4, 0xc4,
	0x1c, 0x10, 0x11, 0xb1, 0x8a, 0x89, 0x3b, 0x00, 0xa6, 0x2d, 0xcc, 0xf0, 0x14, 0x82, 0x17, 0x13,
	0x66, 0x98, 0xc4, 0x06, 0xf6, 0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xe6, 0x18, 0x8d,
	0x1d, 0x01, 0x00, 0x00,
}
